// Code generated by sqlc. DO NOT EDIT.
// source: teams.sql

package db

import (
	"context"
	"database/sql"
)

const createTeam = `-- name: CreateTeam :execresult
INSERT INTO teams (name)
VALUES ( ? )
`

func (q *Queries) CreateTeam(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTeam, name)
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name
FROM teams
WHERE id = ?
LIMIT 1
`

type GetTeamRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetTeam(ctx context.Context, id int64) (GetTeamRow, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i GetTeamRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, name
FROM teams
ORDER BY id
`

type ListTeamsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListTeams(ctx context.Context) ([]ListTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTeamsRow{}
	for rows.Next() {
		var i ListTeamsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :execresult
UPDATE teams
SET name = ?
WHERE id = ?
`

type UpdateTeamParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTeam, arg.Name, arg.ID)
}
