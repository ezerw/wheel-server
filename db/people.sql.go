// Code generated by sqlc. DO NOT EDIT.
// source: people.sql

package db

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :execresult
INSERT INTO people (
    first_name,
    last_name,
    email,
    team_id
) VALUES (
    ?, ?, ?, ?
)
`

type CreatePersonParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	TeamID    int64  `json:"team_id"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPerson,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.TeamID,
	)
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM people
WHERE id = ?
AND team_id = ?
`

type DeletePersonParams struct {
	ID     int64 `json:"id"`
	TeamID int64 `json:"team_id"`
}

func (q *Queries) DeletePerson(ctx context.Context, arg DeletePersonParams) error {
	_, err := q.db.ExecContext(ctx, deletePerson, arg.ID, arg.TeamID)
	return err
}

const getPerson = `-- name: GetPerson :one
SELECT id, first_name, last_name, email, team_id
FROM people
WHERE id = ?
  AND team_id = ?
LIMIT 1
`

type GetPersonParams struct {
	ID     int64 `json:"id"`
	TeamID int64 `json:"team_id"`
}

type GetPersonRow struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	TeamID    int64  `json:"team_id"`
}

func (q *Queries) GetPerson(ctx context.Context, arg GetPersonParams) (GetPersonRow, error) {
	row := q.db.QueryRowContext(ctx, getPerson, arg.ID, arg.TeamID)
	var i GetPersonRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.TeamID,
	)
	return i, err
}

const listPeople = `-- name: ListPeople :many
SELECT id, first_name, last_name, email, team_id
FROM people
WHERE team_id = ?
ORDER BY id
`

type ListPeopleRow struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	TeamID    int64  `json:"team_id"`
}

func (q *Queries) ListPeople(ctx context.Context, teamID int64) ([]ListPeopleRow, error) {
	rows, err := q.db.QueryContext(ctx, listPeople, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPeopleRow{}
	for rows.Next() {
		var i ListPeopleRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :execresult
UPDATE people
SET first_name = ?, last_name = ?, email = ?, team_id = ?
WHERE id = ?
`

type UpdatePersonParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	TeamID    int64  `json:"team_id"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePerson,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.TeamID,
		arg.ID,
	)
}
